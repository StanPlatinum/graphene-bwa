# Manifest file example
#
# This manifest was prepared and tested on Ubuntu 16.04.

libos.entrypoint = "{{ app_dir }}/{{ app_name }}"
loader.argv0_override = "{{ app_name }}"

# LibOS layer library of Graphene. There is currently only one implementation,
# so it is always set to libsysdb.so. 
loader.preload = "file:{{ graphene.libos }}"

# Graphene log level
loader.log_level = "{{ log_level }}"

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = true

# Specify paths to search for libraries. The usual LD_LIBRARY_PATH syntax
# applies. Paths must be in-Graphene visible paths, not host-OS paths (i.e.,
# paths must be taken from fs.mount.xxx.path, not fs.mount.xxx.uri).
loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
loader.env.HOME = "{{ home }}"

# Mount host-OS directory to required libraries (in 'uri') into in-Graphene
# visible directory /lib (in 'path').
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ graphene.runtimedir() }}"

fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "{{ arch_libdir }}"
fs.mount.lib2.uri = "file:{{ arch_libdir }}"

fs.mount.lib3.type = "chroot"
fs.mount.lib3.path = "/usr{{ arch_libdir }}"
fs.mount.lib3.uri = "file:/usr/{{ arch_libdir }}"

fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

fs.mount.{{ app_name }}.type = "chroot"
fs.mount.{{ app_name }}.path = "{{ app_dir }}"
fs.mount.{{ app_name }}.uri = "file:{{ app_dir }}"

fs.mount.mnt.type = "chroot"
fs.mount.mnt.path = "/mnt"
fs.mount.mnt.uri = "file:/mnt"

# Set enclave size (somewhat arbitrarily) to 256MB. Recall that SGX v1 requires
# to specify enclave size at enclave creation time.
# sgx.enclave_size = "32G"
sgx.enclave_size = "512M"

# Set maximum number of in-enclave threads (somewhat arbitrarily) to 4. Recall
# that SGX v1 requires to specify the maximum number of simultaneous threads at
# enclave creation time.
sgx.thread_num = 6

# Specify all binaries used by the target binary and its dependencies (including all libs)
# which can be loaded at runtime via dlopen).
sgx.trusted_files.{{ app_name }} = "file:{{ app_dir }}/{{ app_name }}"
sgx.trusted_files.runtime = "file:{{ graphene.runtimedir() }}"
sgx.trusted_files.arch_libdir = "file:{{ arch_libdir }}/"
sgx.trusted_files.usr_arch_libdir = "file:/usr/{{ arch_libdir }}/"

sgx.allowed_files.data = "file:data/"
sgx.allowed_files.fstab = "file:/etc/fstab"

sgx.allowed_files.work = "file:/mnt/graphene-dida-bwa/work/"

# sgx.allowed_files.ref_80 = "file:ref_80/"
# sgx.allowed_files.unprotected = "file:up/"
# sgx.allowed_files.SRR062634 = "file:./SRR062634.filt.fastq"
# sgx.allowed_files.protected = "file:pr/"

sgx.allowed_files.ref_80 = "file:/mnt/graphene-dida-bwa/work/ref_80/"
sgx.allowed_files.ref_40 = "file:/mnt/graphene-dida-bwa/work/ref_40/"

sgx.allowed_files.unprotected = "file:/mnt/graphene-dida-bwa/up/"
sgx.allowed_files.SRR062634 = "file:/mnt/graphene-dida-bwa/SRR062634.filt.fastq"
sgx.protected_files_key = "ffeeddccbbaa99887766554433221100"
sgx.protected_files.protected = "file:/mnt/graphene-dida-bwa/pr/"
sgx.protected_files.protected_out = "file:/mnt/graphene-dida-bwa/pr/out/"