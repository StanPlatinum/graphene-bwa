# bwa manifest example
#
# This manifest was prepared and tested on Ubuntu 18.04.
#
# bwa must be run with the pal_loader:
#
# ./pal_loader bwa.manifest <script>


# The executable to load in Graphene.
loader.exec = file:./bwa
loader.argv0_override = bwa

# Graphene environment, including the path of the library OS and the debug
# option (inline/none).
loader.preload = file:./../../Runtime/libsysdb.so
loader.debug_type = none

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = 1

# Environment variables for bwa
#loader.env.LD_LIBRARY_PATH = /lib:/lib/x86_64-linux-gnu:./install/lib
loader.env.LD_LIBRARY_PATH = /lib:/usr/lib:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:./install/lib

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAPHENEDIR.
fs.mount.lib.type = chroot
fs.mount.lib.path = /lib
fs.mount.lib.uri = file:./../../Runtime

# Host-level libraries (e.g., /lib/x86_64-linux-gnu) required by the bwa executable
fs.mount.lib2.type = chroot
fs.mount.lib2.path = /lib/x86_64-linux-gnu
fs.mount.lib2.uri = file:/lib/x86_64-linux-gnu

#fs.mount.lib2.path = $(ARCH_LIBDIR)
#fs.mount.lib2.uri = file:$(ARCH_LIBDIR)


# Host-level directory (/usr) required by the bwa executable
fs.mount.usr.type = chroot
fs.mount.usr.path = /usr
fs.mount.usr.uri = file:/usr

# Mount the current working directory
fs.mount.cwd.type = chroot
fs.mount.cwd.path = /home/dajiejie/graphene/Examples/bwa
fs.mount.cwd.uri = file:.


# Mount bwa's default .upload-dirs path
fs.mount.var_tmp.type = chroot
fs.mount.var_tmp.path = /var/tmp
fs.mount.var_tmp.uri = file:/var/tmp

# SGX general options

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If bwa needs more virtual memory
# than the enclave size, Graphene will not be able to allocate it.
sgx.enclave_size = 1024M

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
sgx.thread_num = 10


sgx.allowed_files.data= file:./data

# SGX trusted libraries

# Glibc libraries
sgx.trusted_files.ld = file:./../../Runtime/ld-linux-x86-64.so.2
sgx.trusted_files.libc = file:./../../Runtime/libc.so.6
sgx.trusted_files.libm = file:./../../Runtime/libm.so.6
sgx.trusted_files.libdl = file:./../../Runtime/libdl.so.2
sgx.trusted_files.librt = file:./../../Runtime/librt.so.1
sgx.trusted_files.libutil = file:./../../Runtime/libutil.so.1
sgx.trusted_files.libpthread = file:./../../Runtime/libpthread.so.0
sgx.trusted_files.libz = file:/lib/x86_64-linux-gnu/libz.so.1
sgx.trusted_files.nss_files = file:/lib/x86_64-linux-gnu/libnss_files.so.2

# C++ dependencies
#sgx.trusted_files.libcpp = file:/usr/$(ARCH_LIBDIR)/libstdc++.so.6
#sgx.trusted_files.libcpp = file:$(GRAPHENEDIR)/Runtime/libstdc++.so.6
sgx.trusted_files.libstdc     = file:/usr/lib/x86_64-linux-gnu/libstdc++.so.6
#sgx.trusted_files.libstdc     = file:$(GRAPHENEDIR)/Runtime/libstdc++.so.6
sgx.trusted_files.libgccs     = file:/lib/x86_64-linux-gnu/libgcc_s.so.1

sgx.allowed_files.install = file:install